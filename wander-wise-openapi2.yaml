swagger: '2.0'
info:
  version: '1.0'
  title: Wander-Wise-API-1
  contact: {}
host: example.com
basePath: /
securityDefinitions: {}
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /auth/register:
    post:
      description: >2+

        This endpoint allows users to register by sending a POST request to the specified URL. The request should include the user's name, email, and password in the request body.


        ### Request Body

        - `name` (string, required): The name of the user.

        - `email` (string, required): The email address of the user.

        - `password` (string, required): The password for the user account.


        ### Response

        The endpoint returns a status code of 400 along with a message in the response body.

      summary: Register User
      tags:
      - Auth
      operationId: RegisterUser
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/RegisterUserRequest'
      responses:
        '200':
          description: ''
          headers: {}
      security: []
  /auth/login:
    post:
      description: "This endpoint is used to authenticate and login a user.\n\n### Request\n\n- Method: POST\n- URL: {{URL}}/auth/login\n- Payload Type: raw\n    \n\n#### Payload\n\n- username (string)\n- email (string)\n- password (string)\n    \n\n### Response\n\n- Status: 200\n- Body:\n    \n    ``` json\n    {\n        \"user\": {\n            \"name\": \"\"\n        },\n        \"token\": \"\"\n    }\n    \n     ```"
      summary: Login User
      tags:
      - Auth
      operationId: LoginUser
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/LoginUserRequest'
      responses:
        '200':
          description: ''
          headers: {}
      security: []
  /posts:
    post:
      summary: Create Post
      tags:
      - Posts
      operationId: CreatePost
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/CreatePostRequest'
      responses:
        '200':
          description: ''
          headers: {}
      security: []
    get:
      summary: Get All Posts
      tags:
      - Posts
      operationId: GetAllPosts
      deprecated: false
      produces:
      - application/json
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      security: []
  /posts/id:
    patch:
      summary: Update Post
      tags:
      - Posts
      operationId: UpdatePost
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/UpdatePostRequest'
      responses:
        '200':
          description: ''
          headers: {}
      security: []
  /posts/:id:
    delete:
      summary: Delete Post
      tags:
      - Posts
      operationId: DeletePost
      deprecated: false
      produces:
      - application/json
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      security: []
  /posts/home:
    get:
      summary: Get All Post Users
      tags:
      - Posts
      operationId: GetAllPostUsers
      deprecated: false
      produces:
      - application/json
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      security: []
  /posts/uploads:
    post:
      summary: Upload Image
      tags:
      - Posts
      operationId: UploadImage
      deprecated: false
      produces:
      - application/json
      consumes:
      - multipart/form-data
      parameters:
      - name: image
        in: formData
        required: true
        type: file
        format: file
        description: ''
      responses:
        '200':
          description: ''
          headers: {}
      security: []
definitions:
  RegisterUserRequest:
    title: RegisterUserRequest
    example:
      name: haidil
      email: haidil@gmail.com
      password: secret
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string
    required:
    - name
    - email
    - password
  LoginUserRequest:
    title: LoginUserRequest
    example:
      email: oreo@gmail.com
      password: secret
    type: object
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
  CreatePostRequest:
    title: CreatePostRequest
    example:
      title: Post ketiga 3
      image: contoh image
      description: Percobaan ketiga post
    type: object
    properties:
      title:
        type: string
      image:
        type: string
      description:
        type: string
    required:
    - title
    - image
    - description
  UpdatePostRequest:
    title: UpdatePostRequest
    example:
      title: Post pertama (BARU DI EDIT)
      image: contoh image
      description: Percobaan pertama edited post
    type: object
    properties:
      title:
        type: string
      image:
        type: string
      description:
        type: string
    required:
    - title
    - image
    - description
security: []
tags:
- name: Misc
  description: ''
- name: Auth
  description: ''
- name: Posts
  description: ''
